{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#_1","title":"Manipulate and Visualize Time Series Collections.","text":"<p>An open-source Python library for Data Scientists to efficiently manipulate collections of time series data. Features include data loading, transformation, persistence, and visualization.</p> <p> </p> <ul> <li>Documentation: https://elehcimd.github.io/cumulative</li> <li>Source code: https://github.com/elehcimd/cumulative (License: BSD 3-Clause)</li> <li>Discussions: Ask questions, share ideas, engage</li> <li>Funding: You can star the project on GitHub and hire me to make sense of your time series</li> </ul>"},{"location":"#requirements","title":"Requirements","text":"<ul> <li>Python 3.10+</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>To install Cumulative:</p> <pre><code>pip install cumulative --upgrade\n</code></pre> <p>How to integrate Cumulative it in your projects?</p> <p>Cumulative is progressing rapidly and interfaces might change at any time. Pin its exact version for your project, to make sure it all works. Have tests for your project, and update it once you verify that things work correctly.</p>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the terms of the BSD 3-Clause License.</p> <p>Latest update: <code>2024-08-29</code> using <code>cumulative==0.1.11</code></p>"},{"location":"cite/","title":"Citing Cumulative in your publications","text":"<p>You are welcome to cite Cumulative in your research:</p> <pre><code>@software{cumulative2024,\n  author = {Michele Dallachiesa},\n  license = {BSD-3},\n  title = {Cumulative: Manipulate and Visualize Time Series Collections.},\n  url = {https://github.com/elehcimd/cumulative},\n  year = {2024}\n}\n</code></pre>"},{"location":"license/","title":"License","text":"<pre><code>BSD 3-Clause License\n\nCopyright (c) 2022-2024, Michele Dallachiesa &lt;michele.dallachiesa@sigforge.com&gt;\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.\n\n* Neither the name of the copyright holder nor the names of its\n  contributors may be used to endorse or promote products derived from\n  this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n</code></pre>"},{"location":"sponsor/","title":"Become a sponsor","text":"<p>By joining the Insiders program, you'll get immediate access to the latest features while also helping support the ongoing development of Cumulative. Thanks to our awesome sponsors, this project is actively maintained.</p>"},{"location":"sponsor/#how-to-join-the-insiders-program","title":"How to join the Insiders program","text":"<p>Please send a short email with \"SPONSOR-CUMULATIVE\" in the subject to michele.dallachiesa@sigforge.com and I will get back to you.</p>"},{"location":"sponsor/#other-ways-to-support-the-initiative","title":"Other ways to support the initiative","text":"<p>You can star the project on GitHub and hire me to make sense of your time series.</p>"},{"location":"blog/","title":"Blog","text":""},{"location":"blog/2024/06/06/test/","title":"Test","text":""},{"location":"tutorial/","title":"Getting started","text":"<p>This tutorial teaches you how to load, manipulate, and visualize time series datasets. You can follow it sequentially or jump to specific questions as needed.</p>"},{"location":"tutorial/#installation","title":"Installation","text":"<p>Cumulative requires Python 3.10+ and depends on MLtraq 0.1.36+, and Pandas 1.5.3+, which are installed as dependencies. To install:</p> <pre><code>pip install cumulative --upgrade\n</code></pre>"},{"location":"tutorial/#examples","title":"Examples","text":"<p>The code examples are fully self-contained to reproduce the outputs. This example shows the Cumulative version used to compile this tutorial. Make sure to have the latest release installed.</p> <p>Cumulative version</p> <p><pre><code>import cumulative\n\nprint(cumulative.__version__)\n</code></pre> Output<pre><code>0.1.11\n</code></pre></p>"},{"location":"tutorial/#key-concepts","title":"Key concepts","text":""},{"location":"tutorial/#collections-of-time-series","title":"Collections of time series","text":"<p>The <code>Cumulative</code> class handles collections of time series of varying length and their transformations. The data is stored as a <code>Pandas</code> dataframe, using <code>NumPy</code> arrays as cell values.</p> <p>Example of time series collection</p> <p><pre><code>import numpy as np\nimport pandas as pd\nfrom cumulative import Cumulative\n\ndf = pd.DataFrame(\n    {\n        \"base.x\": [np.array([0, 1, 2, 3, 4, 5]), np.array([0, 1, 2, 3])],\n        \"base.y\": [\n            np.array([10, 20, 30, 40, 50, 60]),\n            np.array([5, 15, 25, 35]),\n        ],\n        \"base.category\": [\"A\", \"B\"],\n    }\n)\n\n\nc = Cumulative(df)\nprint(c.df)\n</code></pre> Output<pre><code>               base.x                    base.y base.category\n0  [0, 1, 2, 3, 4, 5]  [10, 20, 30, 40, 50, 60]             A\n1        [0, 1, 2, 3]           [5, 15, 25, 35]             B\n</code></pre></p>"},{"location":"tutorial/#dataframe-columns","title":"Dataframe columns","text":"<ul> <li> <p>The column names are organized hierarchically, using the dot as separator. Prefixes can be used as source and destination of transformations. Naming conventions:</p> </li> <li> <p>The column suffixes <code>.x</code> and <code>.y</code> represent the X, Y values of the series.</p> </li> <li>The column prefix <code>base.</code> is the default source and destination of transformations.</li> </ul>"},{"location":"tutorial/#transformations","title":"Transformations","text":"<ul> <li>Transformations are applied to a subset of columns with a source prefix and might result in additional columns with a destination prefix or reordered rows. One of the simplest transformation is <code>copy</code>.</li> </ul> <p>Example of copy transform</p> <p><pre><code>import pandas as pd\nfrom cumulative import Cumulative\n\ndf = pd.DataFrame(\n    {\n        \"base.x\": [[0, 1, 2, 3, 4, 5], [0, 1, 2, 3]],\n        \"base.y\": [[10, 20, 30, 40, 50, 60], [5, 15, 25, 35]],\n    }\n)\n\nc = Cumulative(df)\nc.copy(src=\"base\", dst=\"test\")\n\nprint(\"Type: \", type(c.df))\nprint(\"--\")\nprint(c.df)\n</code></pre> Output<pre><code>Type:  &lt;class 'pandas.core.frame.DataFrame'&gt;\n--\n               base.x                    base.y              test.x                    test.y\n0  [0, 1, 2, 3, 4, 5]  [10, 20, 30, 40, 50, 60]  [0, 1, 2, 3, 4, 5]  [10, 20, 30, 40, 50, 60]\n1        [0, 1, 2, 3]           [5, 15, 25, 35]        [0, 1, 2, 3]           [5, 15, 25, 35]\n</code></pre></p>"},{"location":"tutorial/#pipelines","title":"Pipelines","text":"<p>Transformations are the base element to construct transformation pipelines. In the following example,  we apply a <code>cumsum</code> operation to the <code>base.</code> prefix arrays <code>x</code> and <code>y</code>, saving the result to the <code>C</code> prefix. The <code>C</code> prefix arrays are then piped as input for the minmax scaler, with destination prefix <code>S</code>. The result is a data frame with additional columns for each step. If source or destination is omitted,  the default prefix <code>base.</code> is used.</p> <p>Example of piped transforms</p> <p><pre><code>import pandas as pd\nfrom cumulative import Cumulative\n\ndf = pd.DataFrame(\n    {\n        \"base.x\": [[0, 1, 2, 3, 4, 5], [0, 1, 2, 3]],\n        \"base.y\": [[10, 20, 30, 40, 50, 60], [5, 15, 25, 35]],\n    }\n)\n\nc = Cumulative(df)\nc.cumsum(src=\"base\", dst=\"C\").scale(src=\"C\", dst=\"S\", kind=\"xy\")\n\nprint(c.df.iloc[0])\n</code></pre> Output<pre><code>base.x                   [0, 1, 2, 3, 4, 5]\nbase.y             [10, 20, 30, 40, 50, 60]\nC.x                      [0, 1, 2, 3, 4, 5]\nC.y             [10, 30, 60, 100, 150, 210]\nS.x          [0.0, 0.2, 0.4, 0.6, 0.8, 1.0]\nS.x.min                                   0\nS.x.max                                   5\nS.y        [0.0, 0.1, 0.25, 0.45, 0.7, 1.0]\nS.y.min                                  10\nS.y.max                                 210\nName: 0, dtype: object\n</code></pre></p> <p>Tip</p> <p>By default, all destination columns with the destination prefix are dropped before adding the new ones, ensuring a clean and consistent state.    </p>"},{"location":"tutorial/plotting/","title":"Plotting","text":"<p>You can select the prefix to source the <code>x</code>, <code>y</code> values to plot.</p> <p>Example of plotting</p> <p><pre><code>from cumulative.datasets.load_dist import load_dist\nfrom scipy.stats import cosine\n\nc = load_dist([cosine] * 100, kind=\"rvs\")\n\nprint(\"Dataset overview:\")\nc.describe()\n\nc.plot.scatter(style=\"-\", color=\"blue\", alpha=0.1).render()\n</code></pre> Output<pre><code>Dataset overview:\nCount...: 100\nLength..: min=100 max=100 diff=0\nX min...: min=0.0 max=0.0 diff=0.0\nX max...: min=1.0 max=1.0 diff=0.0\nY min...: min=-2.940700145233411 max=-1.8749936864835033 diff=1.0657064587499079\nY max...: min=1.8791696482729665 max=2.9432415183731666 diff=1.0640718701002\n</code></pre></p> <p></p> <p>Example of plotting</p> <p><pre><code>from cumulative.datasets.load_dist import load_dist\nfrom cumulative.plot import Canvas\nfrom scipy.stats import norm\n\ncanvas = Canvas()\nload_dist([norm(0, 1)] * 30, kind=\"rvs\").plot.scatter(\n    canvas=canvas, style=\"-\", color=\"green\", alpha=0.5\n)\nload_dist([norm(0, 2)] * 30, kind=\"rvs\").plot.scatter(\n    canvas=canvas, style=\"-\", color=\"blue\", alpha=0.5\n)\nload_dist([norm(0, 3)] * 30, kind=\"rvs\").plot.scatter(\n    canvas=canvas, style=\"-\", color=\"red\", alpha=0.5\n).render()\n</code></pre> Output<pre><code>[image]\n</code></pre></p> <p></p>"},{"location":"blog/archive/2024/","title":"2024","text":""},{"location":"blog/category/test/","title":"test","text":""}]}